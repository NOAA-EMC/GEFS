#!/bin/sh
#PBS -N jgefs_atmos_forecast_16_35d_00_c00
##PBS -o /gpfs/dell6/ptmp/Xianwu.Xue/o/gefs_hub_ecf/com/output/dev/20200509/jgefs_atmos_forecast_00.%J
#PBS -j oe
##PBS -l place=vscatter,select=3:ncpus=128:mpiprocs=128:mem=500GB
#PBS -l place=vscatter,select=2:ncpus=128:mpiprocs=128:mem=500GB+1:ncpus=64:mpiprocs=64:mem=250GB
##PBS -l place=vscatter,select=4:ncpus=108:mpiprocs=108
##PBS -n 320
##PBS -R span[ptile=40]
#PBS -q dev
#PBS -l walltime=3:30:00
##PBS -L /bin/sh
#PBS -A GEFS-DEV
#PBS -l debug=true

set -x

cd $PBS_O_WORKDIR

#module purge
export MEMBER=c00

export model=gefs
# to get HOMEgefs
f=lsf_common.sh
if [[ -f "$f" ]]; then
    echo "$f exists."
    source $f
elif [[ -f "../$f" ]]; then
    echo "../$f exists."
    source ../$f
elif [[ -f "../../$f" ]]; then
    echo "../../$f exists."
    source ../../$f
elif [[ -f "../../../$f" ]]; then
    echo "../../../$f exists."
    source ../../../$f
fi
. ${HOMEgefs}/versions/run.ver

module purge
module load envvar/$envvar_ver
module load PrgEnv-intel/$PrgEnv_intel_ver
module load craype/$craype_ver
module load intel/$intel_ver

module load cray-mpich/$cray_mpich_ver
module load cray-pals/$cray_pals_ver

module load prod_util/$prod_util_ver
module load prod_envir/$prod_envir_ver

module load netcdf/$netcdf_ver
module load hdf5/$hdf5_ver
#module load lsf/$lsf_ver
module load cfp/$cfp_ver
export USE_CFP=YES

module list

# EXPORT list here
ulimit -s unlimited
ulimit -a

f=lsf_common.sh
if [[ -f "$f" ]]; then
    echo "$f exists."
    source $f
elif [[ -f "../$f" ]]; then
    echo "../$f exists."
    source ../$f
elif [[ -f "../../$f" ]]; then
    echo "../../$f exists."
    source ../../$f
elif [[ -f "../../../$f" ]]; then
    echo "../../../$f exists."
    source ../../../$f
fi

#---
export RUNMEM=ge${MEMBER} #$MEMBER

#---- 
export layout_x_lr=6
export layout_y_lr=8
export WRITE_GROUP_lr=1
export WRTTASK_PER_GROUP_lr=32
export parallel_threads_lr=1

#---
export ESMF_RUNTIME_PROFILE=ON
export ESMF_RUNTIME_PROFILE_OUTPUT=SUMMARY
export print_memory_usage=".true." #".false."

export total_tasks=$((layout_x_lr * layout_y_lr * 6 + WRTTASK_PER_GROUP_lr * WRITE_GROUP_lr)) #320
#export taskspernode=40
export COREPERNODE=128
export FORECAST_SEGMENT=lr
#export RERUN="YES"

#export gefsmpexec="mpiexec -n $total_tasks" # -ppn 108"

export envir=prod
# CALL executable job script here
${HOMEgefs}/jobs/JGEFS_FORECAST
