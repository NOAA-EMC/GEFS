#! /usr/bin/env bash

source "${HOMEgefs:-${HOMEgfs}}/ush/preamble.sh"

####################################
# Determine Job Output Name on System
####################################
export jobid=${jobid:-"${job}.${PBS_JOBID}"}
export pgmout="OUTPUT.${PBS_JOBID}"
export pgmerr=errfile

####################################
# Specify and create working directory
####################################
export DATA=${DATA:-${DATAROOT}/${jobid}}
mkdir -p $DATA
cd $DATA

####################################
# Specify NET and RUN Name and model
####################################
export NET=${NET:-gefs}
export envir=${envir:-prod}
export RUN=${RUN:-gefs}

######################################
# SENDCOM  - Copy Files From TMPDIR to $COMOUT
# SENDDBN  - Issue DBNet Client Calls
# SENDECF  - Flag Events on ECF
# VERBOSE  - Specify Verbose Output
######################################
export SENDCOM=${SENDCOM:-YES}
export SENDDBN=${SENDDBN:-YES}
export SENDECF=${SENDECF:-YES}
export VERBOSE=${VERBOSE:-YES}

######################################
# Set up the date information
######################################
export cycle=t${cyc}z
setpdy.sh
source PDY

if [ ${FORECAST_SEGMENT} = lr ]; then
  export cyc=00
  export cycle=t${cyc}z
fi

####################################
# Specify Execution Areas
####################################
export HOMEgefs=${HOMEgefs:-${PACKAGEROOT}/gefs.${gefs_ver}}
export EXECgefs=${EXECgefs:-$HOMEgefs/exec}
export USHgefs=${USHgefs:-$HOMEgefs/ush}
export FIXgefs=${FIXgefs:-$HOMEgefs/fix/fix_gefs}
export PARMgefs=${PARMgefs:-$HOMEgefs/parm}

##############################################
# Define COM directories
##############################################
ver=${gefs_ver:0:5}
export ROTDIR=${ROTDIR:-$(compath.py $envir/com/$NET/${ver})}

#############################
# Source relevant config files
#############################
export CDATE=$PDY$cyc
configs="base fcst"
config_path=${PARMgefs}/config
for config in $configs; do
  . ${config_path}/config.${config}
  export err=$?
  if [[ $err != 0 ]]; then
    echo "FATAL ERROR in ${BASH_SOURCE[0]}: Error while loading parm file ${config_path}/config.${config}"
    exit $err
  fi
done

export APRUN_UFS=${APRUN_UFS:-"${launcher:-'mpiexec -l'} -n ${npe_fcst} -ppn ${npe_node_fcst} --cpu-bind depth --depth ${NTHREADS_FV3}"}

if [[ $cplchm = ".true." ]]; then
  COMPONENT="chem"
fi

export COMPONENT=${COMPONENT:-atmos}

echo "Environment before calling script"
env | sort

# Ignore possible spelling error (nothing is misspelled)
# shellcheck disable=SC2153
GDATE=$(${NDATE} -"${assim_freq}" "${PDY}${cyc}")
# shellcheck disable=
declare -x gPDY="${GDATE:0:8}"
declare -x gcyc="${GDATE:8:2}"

# Construct COM variables from templates (see config.com)
declare -rx memchar=${RUNMEM:2:3}

MEMDIR="${memchar}" YMD=${PDY} HH=${cyc} generate_com -rx COM_ATMOS_RESTART COM_ATMOS_INPUT COM_ATMOS_ANALYSIS \
  COM_ATMOS_HISTORY COM_ATMOS_MASTER

RUN=${rCDUMP} MEMDIR="${memchar}" YMD="${gPDY}" HH="${gcyc}" generate_com -rx COM_ATMOS_RESTART_PREV:COM_ATMOS_RESTART_TMPL

if [[ ${DO_WAVE} == "YES" ]]; then
  MEMDIR="${memchar}" YMD=${PDY} HH=${cyc} generate_com -rx COM_WAVE_RESTART COM_WAVE_PREP COM_WAVE_HISTORY
  RUN=${rCDUMP} MEMDIR="${memchar}" YMD="${gPDY}" HH="${gcyc}" generate_com -rx COM_WAVE_RESTART_PREV:COM_WAVE_RESTART_TMPL
fi

if [[ ${DO_OCN} == "YES" ]]; then
  MEMDIR="${memchar}" YMD=${PDY} HH=${cyc} generate_com -rx COM_MED_RESTART COM_OCEAN_RESTART \
    COM_OCEAN_INPUT COM_OCEAN_HISTORY COM_OCEAN_ANALYSIS
  RUN=${rCDUMP} MEMDIR="${memchar}" YMD="${gPDY}" HH="${gcyc}" generate_com -rx COM_OCEAN_RESTART_PREV:COM_OCEAN_RESTART_TMPL
fi

if [[ ${DO_ICE} == "YES" ]]; then
   MEMDIR="${memchar}" YMD=${PDY} HH=${cyc} generate_com -rx COM_ICE_HISTORY
   RUN=${rCDUMP} MEMDIR="${memchar}" YMD="${gPDY}" HH="${gcyc}" generate_com -rx COM_ICE_RESTART_PREV:COM_ICE_RESTART_TMPL
fi

if [[ ${DO_AERO} == "YES" ]]; then
  MEMDIR="${memchar}" YMD=${PDY} HH=${cyc} generate_com -rx COM_CHEM_HISTORY
fi

#############################################################
# Execute the script
$HOMEgefs/scripts/exgefs_forecast.sh
export err=$?
if [[ $err == 0 ]]; then
  echo "$job completed normally!"
else
  echo "FATAL ERROR in ${BASH_SOURCE[0]}: $job failed!"
  exit $err
fi
#############################################################

##############################
# Remove the Temporary working directory
##############################
cd $DATAROOT
if [ ${KEEPDATA:-NO} = NO ] ; then rm -rf $DATA ; fi

exit $err
