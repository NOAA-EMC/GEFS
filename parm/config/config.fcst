#! /usr/bin/env bash

#
# Forecast Input Variables
#
export HOMEgfs=${HOMEgfs:-$HOMEgefs}

export RERUN=${RERUN:-"NO"}
export CDATE_RST=${CDATE_RST:-""}

#Writing out
export NUM_FILES=2

# export LONB=$LONB
# export LATB=$LATB
export NSOUT=0

#-----
# I/O QUILTING, true--use Write Component; false--use GFDL FMS
# if quilting=true, choose OUTPUT_GRID as cubed_sphere_grid in netcdf or gaussian_grid
# if gaussian_grid, set OUTPUT_FILE for nemsio or netcdf
# WRITE_DOPOST=true, use inline POST
export QUILTING=".true."
export OUTPUT_GRID=${FV3OUT_GRID:-"gaussian_grid"}
export OUTPUT_FILE="netcdf"
export WRITE_DOPOST=".true."
export WRITE_NSFLIP=".true."
PARM_POST=${PARM_POST:-$HOMEgfs/parm/post}
export FLTFILEGFS=$PARM_POST/postxconfig-NT-GEFS.txt
export FLTFILEGFSF00=$PARM_POST/postxconfig-NT-GEFS-F00.txt
export POSTGRB2TBL=$PARM_POST/params_grib2_tbl_new

#-----

# CPU geopmetry
export ntiles=${ntiles:-6}
#PE geometry
export hyperthread=${hyperthread:-".false."}
if [[ $FORECAST_SEGMENT = lr ]]; then
  export NTHREADS_FV3=${parallel_threads_lr:-1}
else
  if [[ $cplchm = ".true." ]]; then
    export NTHREADS_FV3=${parallel_threads_chem:-1}
  else
    export NTHREADS_FV3=${parallel_threads:-1}
  fi
fi

export EXPDIR=${HOMEgfs}/parm/config

export APRUN=${APRUN:-""}

# OTHER FV# FCST related environment
export warm_start=${warm_start:-".false."}
export read_increment=${read_increment:-".false."}

MEMBER=$(echo $RUNMEM|cut -c4-5)
export CDATE=$PDY$cyc

export rCDUMP=gefs
export CDUMP=gefs

case $FORECAST_SEGMENT in
  hr)
    echo "Integrate the model for the Half-Month range segment"
    export FHINI=${FHINI:-0};
    export CASE=$CASEHR
    export FHMIN=${FHINI}
    export FHMAX=$((fhmaxh+1+1))
    export FHOUT=$FHOUTLF
    export FHZER=6
    export MTNRSL=$MTNRSLFV
    export LONB=$LONBFV
    export LATB=$LATBFV
    export FHMAX_HF=$FHMAXHF
    export FHOUT_HF=$FHOUTHF
    export LEVS=$((LEVSHR+1))
    ;;
  lr)
    echo "Integrate the model for the Longer Range segment"
    export FHINI=${FHINI:-$fhmaxh}
    export RERUN="YES"
    export cplwav=.false.
    export CASE=$CASELR
    export FHMIN=${FHINI}
    export FHMAX=$((fhmax+1))
    export FHOUT=$FHOUTLF
    export FHZER=6
    export MTNRSL=$MTNRSLLR
    export LONB=$LONBLR
    export LATB=$LATBLR
    export FHMAX_HF=$FHMAXHF
    export FHOUT_HF=$FHOUTHF
    export LEVS=$((LEVSLR+1))
    ;;
  *)
    echo "FATAL ERROR in ${BASH_SOURCE}: Incorrect value of FORECAST_SEGMENT=$FORECAST_SEGMENT"
    export err=100
    exit $err
    ;;
esac

export FHMAX_GFS=$FHMAX

########## config.fcst ##########
# Forecast specific

echo "BEGIN: config.fcst"

# Turn off waves if not used for this CDUMP
#case $WAVE_CDUMP in
#  both | ${CDUMP/enkf} ) ;; # Don't change
#  *) DO_WAVE="NO" ;; # Turn waves off
#esac

# Source model specific information that is resolution dependent
string="--fv3 $CASE"
[[ ${DO_OCN} == "YES" ]] && string="$string --mom6 $OCNRES"
[[ ${DO_ICE} == "YES" ]] && string="$string --cice6 $ICERES"
[[ ${DO_WAVE} == "YES" ]] && string="$string --ww3 ${waveGRD// /;}"
source ${EXPDIR}/config.ufs ${string}

# Source component configs if necessary
for component in WAVE OCN ICE AERO; do
  control="DO_${component}"
  if [[ $(eval echo \$$control) == "YES" ]]; then
    . $EXPDIR/config.$(echo "$component" | awk '{ print tolower($1) }')
  fi
done

# Get task specific resources
. ${EXPDIR}/config.resources
export domains_stack_size="16000000"


if [[ "$DONST" = "YES" ]]; then
  . ${EXPDIR}/config.nsst
fi

export esmf_profile=".false."
export esmf_logkind="ESMF_LOGKIND_MULTI_ON_ERROR" #Options: ESMF_LOGKIND_MULTI_ON_ERROR, ESMF_LOGKIND_MULTI, ESMF_LOGKIND_NONE


#######################################################################
# COUPLING COMPONENTS

# cpl defaults
export cpl=".false."
export cplflx=".false."
export cplice=".false."
export cplchm=".false."
export cplwav=".false."

# cpl changes based on APP

if [[ "$DO_COUPLED" = "YES" ]]; then
  export cpl=".true."
fi
if [[ "$DO_AERO" = "YES" ]]; then
  export cplchm=".true."
fi
if [[ "$DO_ICE" = "YES" ]]; then
  export cplice=".true."
  export cplflx=".true."
fi
if [[ "$DO_OCN" = "YES" ]]; then
  export cplflx=".true."
fi
if [[ "$DO_WAVE" = "YES" ]]; then
  export cplwav=".true."
fi

#######################################################################

export FORECASTSH="$HOMEgfs/scripts/exglobal_forecast.sh"
#export FORECASTSH="$HOMEgfs/scripts/exglobal_forecast.py"  # Temp. while this is worked on
export FCSTEXECDIR="$HOMEgfs/exec"
export FCSTEXEC="ufs_model.x"

#######################################################################
# Model configuration
export TYPE=${TYPE:-"nh"}    # choices:  nh, hydro
export MONO=${MONO:-"non-mono"}

# Use stratosphere h2o physics
export h2o_phys=".true."

# Options of stratosphere O3 physics reaction coefficients
export new_o3forc="YES"

export gwd_opt=2

# --GFS.v16 uGWD.v0, used for suite FV3_GFS_v16 and UFS p6 etc
# do_ugwp=T: use unified CGWD and OGWD, and turbulent orographic form drag (TOFD)
# do_ugwp=F: use unified CGWD but old OGWD, TOFD is not uded.
if [[ "$gwd_opt" -eq 1 ]]; then
    export knob_ugwp_version=0
    export do_ugwp=".false."
    export do_tofd=".false."
    export launch_level=$(echo "$LEVS/2.35" |bc)
fi


# -- uGWD.v1, for suite FV3_GFS_v17 and FV3_GFS_v17p8b etc
if [[ "$gwd_opt" -eq 2 ]]; then

    #--used for UFS p7 and p8a
    #export  knob_ugwp_version=1
    #export  do_ugwp=".false."
    #export  do_tofd=".false."
    #export  do_ugwp_v0=".false."
    #export  do_ugwp_v1=".true."
    #export  do_ugwp_v0_orog_only=".false."
    #export  do_ugwp_v0_nst_only=".false."
    #export  do_gsl_drag_ls_bl=".true."
    #export  do_gsl_drag_ss=".true."
    #export  do_gsl_drag_tofd=".true."
    #export  do_ugwp_v1_orog_only=".false."

    #--used for UFS p8
    export knob_ugwp_version=0
    export do_ugwp=".false."
    export do_tofd=".false."
    export do_ugwp_v0=".true."
    export do_ugwp_v1=".false."
    export do_ugwp_v0_orog_only=".false."
    export do_ugwp_v0_nst_only=".false."
    export do_gsl_drag_ls_bl=".false."
    export do_gsl_drag_ss=".true."
    export do_gsl_drag_tofd=".false."
    export do_ugwp_v1_orog_only=".false."
    export launch_level=$(echo "$LEVS/2.35" |bc)
fi




# Sponge layer settings
export tau=10.0
export rf_cutoff=7.5e2
export d2_bg_k1=0.20
export d2_bg_k2=0.04
export dz_min=6
export n_sponge=${n_sponge:-42} # gefs is 23

# PBL/turbulance schemes
export hybedmf=".false."
export satmedmf=".true."
export isatmedmf=1
tbf=""
if [[ "$satmedmf" = ".true." ]]; then tbf="_satmedmf" ; fi

#Convection schemes
export progsigma=".true."
tbp=""
if [ "$progsigma" = ".true." ]; then tbp="_progsigma" ; fi

# Radiation options
export IAER=1011    ; #spectral band mapping method for aerosol optical properties
export iovr_lw=3    ; #de-correlation length cloud overlap method (Barker, 2008)
export iovr_sw=3    ; #de-correlation length cloud overlap method (Barker, 2008)
export iovr=3       ; #de-correlation length cloud overlap method (Barker, 2008)
export icliq_sw=2   ; #cloud optical coeffs from AER's newer version v3.9-v4.0 for hu and stamnes
export isubc_sw=2
export isubc_lw=2

# RRTMGP radiation scheme
export  do_RRTMGP=.false.
export  doGP_cldoptics_LUT=.false.
export  doGP_lwscat=.false.

# LSM configuration
# NoahMP only
export iopt_sfc="3"
export iopt_trs="2"

# Microphysics configuration
export dnats=0
export cal_pre=".true."
export do_sat_adj=".false."
export random_clds=".true."

if [[ "$imp_physics" -eq 99 ]]; then # ZhaoCarr
    export ncld=1
    export FIELD_TABLE="$HOMEgfs/parm/parm_fv3diag/field_table_zhaocarr${tbf}${tbp}"
    export nwat=2

elif [[ "$imp_physics" -eq 6 ]]; then # WSM6
    export ncld=2
    export FIELD_TABLE="$HOMEgfs/parm/parm_fv3diag/field_table_wsm6${tbf}${tbp}"
    export nwat=6

elif [[ "$imp_physics" -eq 8 ]]; then # Thompson
    export ncld=2
    export FIELD_TABLE="$HOMEgfs/parm/parm_fv3diag/field_table_thompson_noaero_tke${tbp}"
    export nwat=6

    export cal_pre=".false."
    export random_clds=".false."
    export effr_in=".true."
    export ltaerosol=".false."
    export lradar=".false."
    export ttendlim="-999"
    export dt_inner=$((DELTIM/2))
    export sedi_semi=.true.
    if [[ "$sedi_semi" = .true. ]]; then export dt_inner=$DELTIM ; fi
    export decfl=10

    export hord_mt_nh_nonmono=5
    export hord_xx_nh_nonmono=5
    export vtdm4_nh_nonmono=0.02
    export nord=2
    export dddmp=0.1
    export d4_bg=0.12
elif [[ "$imp_physics" -eq 11 ]]; then # GFDL
    export ncld=5
    if [[ $cplchm = ".true." ]]; then
        export FIELD_TABLE="$HOMEgfs/parm/parm_fv3diag/chm_field_table_gfdl"
    else
        export FIELD_TABLE="$HOMEgfs/parm/parm_fv3diag/field_table_gfdl${tbf}"
    fi
    export nwat=6
    export dnats=1
    export cal_pre=".false."
    export do_sat_adj=".true."
    export random_clds=".false."
    export lgfdlmprad=".true."
    export effr_in=".true."
    export reiflag=2

    export hord_mt_nh_nonmono=5
    export hord_xx_nh_nonmono=5
    export vtdm4_nh_nonmono=0.02
    export nord=2
    export d4_bg=0.12
    export dddmp=0.1

else
    echo "Unknown microphysics option, ABORT!"

fi

# Stochastic physics
export DO_SPPT=${DO_SPPT:-"NO"}
export DO_SKEB=${DO_SKEB:-"NO"}
export DO_SHUM=${DO_SHUM:-"NO"}
export DO_LAND_PERT=${DO_LAND_PERT:-"NO"}
export DO_CA=${DO_CA:-"YES"}

#coupling settings
export cplmode="nems_frac"
if [[ "${FRAC_GRID:-".true."}" = ".false." ]]; then
  export cplmode="nems_orig"
fi
export psm_bc="1"

export min_lakeice="0.15"
export min_seaice=${min_seaice:-"0.15"}
export use_cice_alb=${use_cice_alb:-".false."}

export FSICL="0"
export FSICS="0"

#---------------------------------------------------------------------

# ideflate: netcdf zlib lossless compression (0-9): 0 no compression
# nbits: netcdf lossy compression level (0-32): 0 lossless
export ideflate=1
export nbits=14
export ishuffle=0
# compression for RESTART files written by FMS
export shuffle=1
export deflate_level=1

#---------------------------------------------------------------------
# Disable the use of coupler.res; get model start time from model_configure
export USE_COUPLER_RES="NO"

# Write more variables to output
export DIAG_TABLE="$HOMEgfs/parm/parm_fv3diag/diag_table"

# Write gfs restart files to rerun fcst from any break point
export restart_interval_gfs=${restart_interval_gfs:-0}
if [[ "$restart_interval_gfs" -le 0 ]]; then
    export restart_interval="$FHMAX_GFS"
else
  rst_list=""
  IAU_OFFSET=${IAU_OFFSET:-0}
  [[ $DOIAU = "NO" ]] && export IAU_OFFSET=0; export IAU_DELTHRS=0; export IAU_FHROT=0
  xfh=$((restart_interval_gfs+(IAU_OFFSET/2)))
  while [ $xfh -le ${FHMAX:-$fhmax} ]; do
    if [[ $FORECAST_SEGMENT = lr ]]; then
      if [[ $xfh > $fhmaxh ]]; then
        rst_list="$rst_list $xfh"
      fi
    else
      rst_list="$rst_list $xfh"
    fi
    xfh=$((xfh+restart_interval_gfs))
  done
  export restart_interval="$rst_list"
fi

if [[ "$DO_AERO" = "YES" ]]; then
    # Make sure a restart file is written at the cadence time
    if [[ ! "${restart_interval[*]}" =~ "$STEP_GFS"  ]]; then
        export restart_interval="$STEP_GFS $restart_interval"
    fi
fi

# Choose coupling with wave
if [[ "$DO_WAVE" = "YES" && "$WAVE_CDUMP" != "gdas" ]]; then
    export cplwav=".true."
fi

# Turn off dry mass adjustment in GFS
export adjust_dry_mass=".false."

# Write each restart file in 16 small files to save time
if [[ "$CASE" = C768 ]]; then
  export io_layout="4,4"
else
  export io_layout="1,1"
fi



if [[ "$DO_AERO" = "YES" ]]; then # temporary settings for aerosol coupling
    export AERO_DIAG_TABLE="${AERO_DIAG_TABLE:-$HOMEgfs/parm/parm_fv3diag/diag_table.aero}"
    export AERO_FIELD_TABLE="${AERO_FIELD_TABLE:-$HOMEgfs/parm/parm_fv3diag/field_table.aero}"
    export AERO_EMIS_FIRE=$( echo "${AERO_EMIS_FIRE:-none}" | awk '{ print tolower($1) }' )
    export AERO_CONFIG_DIR="${AERO_CONFIG_DIR:-$HOMEgfs/parm/chem}"
    export AERO_INPUTS_DIR="${AERO_INPUTS_DIR:-}"
    export fscav_aero="${aero_conv_scav_factors:-${fscav_aero}}"
    export dnats_aero="${aero_diag_tracers:-0}"
fi

# Remember config.efcs will over-ride these values for ensemble forecasts
# if these variables are re-defined there.
# Otherwise, the ensemble forecast will inherit from config.fcst

echo "END: config.fcst"
